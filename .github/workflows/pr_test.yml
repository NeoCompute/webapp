name: PR Integration Tests

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  integration-tests:
    runs-on: ubuntu-latest

    env:
      # Environment variables sourced from GitHub Secrets
      PORT: ${{ secrets.PORT }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_POOL_MAX: ${{ secrets.DB_POOL_MAX }}
      DB_POOL_MIN: ${{ secrets.DB_POOL_MIN }}
      DB_POOL_ACQUIRE: ${{ secrets.DB_POOL_ACQUIRE }}
      DB_POOL_IDLE: ${{ secrets.DB_POOL_IDLE }}
      BCRYPT_SALT_ROUNDS: ${{ secrets.BCRYPT_SALT_ROUNDS }}
      DATABASE_URL: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_DATABASE }}

    steps:
      - name: Print Environment Variables for Debugging
        run: |
          echo "-----------------------------"
          echo "Environment Variables:"
          echo "PORT: $PORT"
          echo "DB_HOST: $DB_HOST"
          echo "DB_PORT: $DB_PORT"
          echo "DB_USER: $DB_USER"
          echo "DB_DATABASE: $DB_DATABASE"
          echo "DB_POOL_MAX: $DB_POOL_MAX"
          echo "DB_POOL_MIN: $DB_POOL_MIN"
          echo "DB_POOL_ACQUIRE: $DB_POOL_ACQUIRE"
          echo "DB_POOL_IDLE: $DB_POOL_IDLE"
          echo "-----------------------------"

      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      # 3. Cache Node.js dependencies to speed up workflow
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Install project dependencies
      - name: Install Dependencies
        run: npm install

      # 5. Install PostgreSQL
      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib

      # 6. Start PostgreSQL service
      - name: Start PostgreSQL
        run: |
          sudo service postgresql start

      - name: Change Working Directory
        run: cd /tmp

      # 7. Configure PostgreSQL
      - name: Configure PostgreSQL
        run: |
          sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
          sudo -u postgres psql -c "ALTER USER $DB_USER CREATEDB;"
          sudo -u postgres psql -c "CREATE DATABASE $DB_DATABASE OWNER $DB_USER;"
          sudo -u postgres psql -d $DB_NAME -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

          sudo service postgresql restart

      # 8. Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL to be Ready
        run: |
          for i in {1..10}; do
            psql "postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_DATABASE" -c '\q' 2>/dev/null && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      # 9. Run Integration Tests
      - name: Run Integration Tests
        run: npm run test

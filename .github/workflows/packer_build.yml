name: Packer Build

on:
  pull_request:
    branches:
      - main
    # types: [closed]
    types: [opened, synchronize, reopened]

jobs:
  packer_build:
    runs-on: ubuntu-latest

    env:
      AWS_CLI_LOG_LEVEL: debug
      PORT: ${{ secrets.PORT }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_POOL_MAX: ${{ secrets.DB_POOL_MAX }}
      DB_POOL_MIN: ${{ secrets.DB_POOL_MIN }}
      DB_POOL_ACQUIRE: ${{ secrets.DB_POOL_ACQUIRE }}
      DB_POOL_IDLE: ${{ secrets.DB_POOL_IDLE }}
      BCRYPT_SALT_ROUNDS: ${{ secrets.BCRYPT_SALT_ROUNDS }}
      CLOUDWATCH_LOG_GROUP: ${{secrets.CLOUDWATCH_LOG_GROUP}}
      CLOUDWATCH_LOG_STREAM: ${{secrets.CLOUDWATCH_LOG_STREAM}}
      AWS_REGION: ${{secrets.AWS_REGION}}
      ENVIRONMENT: ${{secrets.ENVIRONMENT}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install Dependencies
        run: npm install

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib

      - name: Setup PostgreSQL
        env:
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          set -e

          sudo systemctl enable postgresql.service
          sudo systemctl start postgresql.service

          echo "Verifying if the postgresql service is active"
          sudo systemctl is-active --quiet postgresql.service || exit 1

          echo "Creating user... '$DB_USER'"
          sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"

          echo "Granting user... '$DB_USER' the ability to create databases"
          sudo -u postgres psql -c "ALTER USER $DB_USER CREATEDB;"

          echo "Creating database... '$DB_DATABASE'"
          sudo -u postgres psql -c "CREATE DATABASE $DB_DATABASE OWNER $DB_USER;"

          echo "Granting all privileges on database... '$DB_DATABASE' to user... '$DB_USER'"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_DATABASE TO $DB_USER;"

      - name: Create .env File
        env:
          PORT: ${{ secrets.PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_POOL_MAX: ${{ secrets.DB_POOL_MAX }}
          DB_POOL_MIN: ${{ secrets.DB_POOL_MIN }}
          DB_POOL_ACQUIRE: ${{ secrets.DB_POOL_ACQUIRE }}
          DB_POOL_IDLE: ${{ secrets.DB_POOL_IDLE }}
          BCRYPT_SALT_ROUNDS: ${{ secrets.BCRYPT_SALT_ROUNDS }}
          CLOUDWATCH_LOG_GROUP: ${{secrets.CLOUDWATCH_LOG_GROUP}}
          CLOUDWATCH_LOG_STREAM: ${{secrets.CLOUDWATCH_LOG_STREAM}}
          AWS_REGION: ${{secrets.AWS_REGION}}
          ENVIRONMENT: ${{secrets.ENVIRONMENT}}
        run: |
          cat <<EOF > .env
          PORT=$PORT
          DB_HOST=$DB_HOST
          DB_PORT=$DB_PORT
          DB_USER=$DB_USER
          DB_PASSWORD=$DB_PASSWORD
          DB_DATABASE=$DB_DATABASE
          DB_POOL_MAX=$DB_POOL_MAX
          DB_POOL_MIN=$DB_POOL_MIN
          DB_POOL_ACQUIRE=$DB_POOL_ACQUIRE
          DB_POOL_IDLE=$DB_POOL_IDLE
          BCRYPT_SALT_ROUNDS=$BCRYPT_SALT_ROUNDS
          CLOUDWATCH_LOG_GROUP=$CLOUDWATCH_LOG_GROUP
          CLOUDWATCH_LOG_STREAM=$CLOUDWATCH_LOG_STREAM
          AWS_REGION=$AWS_REGION
          ENVIRONMENT=$ENVIRONMENT
          EOF
          cat .env

      - name: Run Integration Tests
        run: npm run test

      - name: Delete node_modules
        run: rm -rf node_modules

      - name: Zip Application Code
        run: |
          zip -r webapp.zip . \
            -x "*.git*" "*.github*" "node_modules/*"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Verify AWS CLI Configuration
        run: aws sts get-caller-identity

      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: "1.10.1"

      - name: Packer Init
        run: packer init ./packer

      - name: Packer Format
        run: packer fmt -check ./packer

      - name: Packer Validate
        run: packer validate ./packer

      - name: Create Image Name
        id: create_image_name
        run: |
          IMAGE_NAME="webapp-$(date +%Y%m%d%H%M%S)"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Packer Build
        run: |
          packer build \
          -var 'artifact_path=webapp.zip' \
          -var 'ami_name=${{ steps.create_image_name.outputs.IMAGE_NAME }}' \
          -var 'instance_type=${{ secrets.INSTANCE_TYPE }}' \
          -var 'region=${{ secrets.AWS_DEFAULT_REGION }}' \
          -var 'source_ami_id=${{ secrets.AWS_SOURCE_AMI_ID }}' \
          -var 'demo_account_id=${{ secrets.AWS_DEMO_ACCOUNT_ID }}' \
          ./packer

      - name: Fetch AMI ID
        id: fetch_ami
        run: |
          NEW_AMI_ID=$(aws ec2 describe-images --filters "Name=name,Values=$IMAGE_NAME" --query "Images[0].ImageId" --output text)
          if [ -z "$NEW_AMI_ID" ]; then
            echo "Failed to fetch AMI ID."
            exit 1
          fi
          echo "AMI_ID=$NEW_AMI_ID" >> $GITHUB_ENV
          echo "Fetched AMI ID: $NEW_AMI_ID"

      - name: Create New Launch Template Version
        run: |
          set -e

          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-ids ${{ secrets.AWS_LAUNCH_TEMPLATE_ID }} \
            --query "LaunchTemplates[0].LatestVersionNumber" --output text)

          if [ -z "$LATEST_VERSION" ]; then
            echo "Failed to fetch the latest version of the Launch Template."
            exit 1
          fi

          echo "LATEST_LAUNCH_TEMPLATE_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

          echo "Latest Launch Template Version: $LATEST_VERSION"
          echo "Fetched AMI ID in create new launch template: $NEW_AMI_ID"
          echo "Fetched AMI ID in create new launch template: ${{ env.AMI_ID }}"

          aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.AWS_LAUNCH_TEMPLATE_ID }} \
            --source-version $LATEST_VERSION \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}"

          UPDATED_VERSION=$(aws ec2 describe-launch-templates \
          --launch-template-ids ${{ secrets.AWS_LAUNCH_TEMPLATE_ID }} \
          --query "LaunchTemplates[0].LatestVersionNumber" --output text)
          echo "Updated Launch Template Version: $UPDATED_VERSION"
          echo "UPDATED_LAUNCH_TEMPLATE_VERSION=$UPDATED_VERSION" >> $GITHUB_ENV

      - name: Update ASG to Use Latest Launch Template Version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.AWS_ASG_NAME }} \
            --launch-template "{\"LaunchTemplateId\":\"${{ secrets.AWS_LAUNCH_TEMPLATE_ID }}\",\"Version\":\"${{env.UPDATED_LAUNCH_TEMPLATE_VERSION}}\"}"

      - name: Trigger Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{secrets.AWS_ASG_NAME}} \
            --preferences "{\"MinHealthyPercentage\":50,\"InstanceWarmup\":300}"

      - name: Wait for Instance Refresh Completion
        run: |
          REFRESH_ID=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name ${{secrets.AWS_ASG_NAME}} \
            --query "InstanceRefreshes[0].InstanceRefreshId" --output text)
            
          echo "Instance Refresh ID: $REFRESH_ID"

          echo "Waiting for Instance Refresh to complete..."
          MAX_RETRIES=20  # 10 minutes assuming a 30-second sleep
          RETRY_COUNT=0

          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{secrets.AWS_ASG_NAME}} \
              --instance-refresh-ids $REFRESH_ID \
              --query "InstanceRefreshes[0].Status" --output text)

            echo "Current Status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance Refresh completed successfully."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance Refresh failed or was cancelled."
              exit 1
            elif [[ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]]; then
              echo "Instance Refresh timed out after $((MAX_RETRIES * 30 / 60)) minutes."
              exit 1
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              sleep 30
            fi
          done
